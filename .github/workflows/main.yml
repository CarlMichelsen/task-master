name: CI/CD

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  docker-build:
    name: Build and publish
    runs-on: ubuntu-latest
    
    steps:
     -
      name: Checkout the repo
      uses: actions/checkout@v3

     -
      name: Build container image
      run: docker build -t ${{secrets.REGISTRY}}/${{secrets.IMAGE_NAME}}:$(echo $GITHUB_SHA | head -c7) .
      
     -
      name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{secrets.DIGITALOCEAN_ACCESS_TOKEN}}
      
     -
      name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 600
      
     -
      name: Remove all old images
      run: if [ ! -z "$(doctl registry repository list | grep "$(echo ${{secrets.IMAGE_NAME}})")" ]; then doctl registry repository delete-manifest $(echo ${{secrets.IMAGE_NAME}}) $(doctl registry repository list-tags $(echo ${{secrets.IMAGE_NAME}}) | grep -o "sha.*") --force; else echo "No repository"; fi
     -
      name: Push image to DigitalOcean Container Registry
      run: docker push ${{secrets.REGISTRY}}/${{secrets.IMAGE_NAME}}:$(echo $GITHUB_SHA | head -c7)

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
       -
        name: Deploy to DigitalOcean droplet via SSH
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            --name $(echo $IMAGE_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
